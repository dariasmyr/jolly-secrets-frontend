schema {
  query: Query
  mutation: Mutation
}

type Account {
  _count: AccountCount!
  avatarUrl: String
  chatMembers: [ChatMember!]
  createdAt: DateTime!
  email: String
  eventApplications: [EventApplication!]
  externalProfiles: [ExternalProfile!]
  groupMembers: [GroupMember!]
  id: Int!
  messages: [Message!]
  notifications: [Notification!]
  roles: [AccountRole!]
  sessions: [AccountSession!]
  status: AccountStatus!
  updatedAt: DateTime!
  username: String!
}

type AccountCount {
  chatMembers: Int!
  eventApplications: Int!
  externalProfiles: Int!
  groupMembers: Int!
  messages: Int!
  notifications: Int!
  sessions: Int!
}

enum AccountRole {
  ADMIN
  USER
}

type AccountSession {
  account: Account!
  accountId: Int!
  createdAt: DateTime!
  expiresAt: DateTime!
  id: Int!
  ipAddr: String!
  updatedAt: DateTime!
  userAgent: String
}

enum AccountStatus {
  ACTIVE
  DELETED
  INACTIVE
}

type AuthResponse {
  account: Account!
  token: String!
}

type Chat {
  _count: ChatCount!
  chatMembers: [ChatMember!]!
  createdAt: DateTime!
  eventApplicationPair: [EventApplicationPair!]
  id: Int!
  members: [ChatMember!]
  messages: [Message!]
  updatedAt: DateTime!
}

type ChatCount {
  eventApplicationPair: Int!
  members: Int!
  messages: Int!
}

type ChatMember {
  account: Account!
  accountId: Int!
  chat: Chat
  chatId: Int
  createdAt: DateTime!
  id: Int!
  role: ChatMemberRole!
  updatedAt: DateTime!
}

enum ChatMemberRole {
  ADMIN
  MEMBER
}

input CreateChatMemberInput {
  accountId: Float!
  chatId: Float!
  role: String!
}

input CreateEventApplicationInput {
  accountId: Int!
  eventId: Int!
  preferences: [CreatePreferenceInput!]!
}

input CreateEventInput {
  description: String!
  endsAt: DateTime!
  groupId: Int!
  name: String!
  startsAt: DateTime!
}

input CreateMessageInput {
  accountId: Float!
  chatId: Float!
  text: String!
}

input CreateOrUpdateGroupInput {
  description: String!
  name: String!
  type: GroupType!
}

input CreatePreferenceInput {
  comment: String!
  dislikes: String!
  likes: String!
  priceRange: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Event {
  _count: EventCount!
  applicationPairs: [EventApplicationPair!]
  createdAt: DateTime!
  description: String!
  endsAt: DateTime!
  eventApplicationPairs: [EventApplicationPair!]!
  group: Group!
  groupId: Int!
  id: Int!
  name: String!
  pictureUrl: String!
  startsAt: DateTime!
  status: EventStatus!
  updatedAt: DateTime!
}

type EventApplication {
  _count: EventApplicationCount!
  account: Account!
  accountId: Int!
  createdAt: DateTime!
  eventApplicationFirstPairs: [EventApplicationPair!]
  eventApplicationSecondPairs: [EventApplicationPair!]
  id: Int!
  preferences: [Preference!]
  status: EventApplicationStatus!
  updatedAt: DateTime!
}

type EventApplicationCount {
  eventApplicationFirstPairs: Int!
  eventApplicationSecondPairs: Int!
  preferences: Int!
}

type EventApplicationPair {
  applicationFirst: EventApplication!
  applicationSecond: EventApplication
  chat: Chat
  chatId: Int
  chats: [Chat!]!
  createdAt: DateTime!
  event: Event!
  eventApplicationFirstId: Int!
  eventApplicationSecondId: Int
  eventId: Int!
  id: Int!
  updatedAt: DateTime!
}

enum EventApplicationStatus {
  GIFT_NOT_RECEIVED
  GIFT_RECEIVED
  GIFT_SENT
  LOOKING_FOR_PAIR
  PAIRED
}

type EventCount {
  applicationPairs: Int!
}

enum EventStatus {
  CLOSED
  EXPIRED
  OPEN
}

type ExternalProfile {
  account: Account!
  accountId: Int!
  createdAt: DateTime!
  externalId: String!
  id: Int!
  provider: ExternalProfileProvider!
  updatedAt: DateTime!
}

enum ExternalProfileProvider {
  GOOGLE
  TELEGRAM
}

type Group {
  _count: GroupCount!
  createdAt: DateTime!
  description: String!
  events: [Event!]
  groupInvites: [GroupInvite!]
  id: Int!
  members: [GroupMember!]
  name: String!
  pictureUrl: String!
  status: GroupStatus!
  type: GroupType!
  updatedAt: DateTime!
}

type GroupCount {
  events: Int!
  groupInvites: Int!
  members: Int!
}

type GroupInvite {
  code: String!
  createdAt: DateTime!
  group: Group!
  groupId: Int!
  id: Int!
  updatedAt: DateTime!
}

type GroupMember {
  account: Account!
  accountId: Int!
  createdAt: DateTime!
  group: Group!
  groupId: Int!
  id: Int!
  role: GroupMemberRole!
  updatedAt: DateTime!
}

enum GroupMemberRole {
  ADMIN
  MEMBER
}

enum GroupStatus {
  CLOSED
  OPEN
}

enum GroupType {
  PRIVATE
  PUBLIC
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Message {
  account: Account!
  accountId: Int!
  chat: Chat
  chatId: Int
  createdAt: DateTime!
  id: Int!
  text: String!
  updatedAt: DateTime!
}

type Mutation {
  createChatMember(input: CreateChatMemberInput!): ChatMember!
  createEvent(input: CreateEventInput!): Event!
  createEventApplication(input: CreateEventApplicationInput!): Event!
  createGroup(input: CreateOrUpdateGroupInput!): Group!
  createGroupInvite(groupId: Int!): GroupInvite!
  createGroupMember(code: String!): GroupMember!
  createMessage(input: CreateMessageInput!): Message!
  deleteAccount: Account!
  deleteEvent(id: Float!): Boolean!
  deleteGroup(id: Int!): Group!
  deletePreference(id: Float!): Preference!
  disableNotifications: Account!
  echo(text: String!): String!
  enableNotifications(email: String!): Account!
  loginWithGoogle(code: String!): AuthResponse!
  loginWithTelegram(token: String!): AuthResponse!
  logout(sessionIds: [Float!]!): Boolean!
  mergeProfileToAccount(accountIdToLeave: Float!, accountIdToRemove: Float!, externalId: String!, provider: String!): Account!
  setEventApplicationStatus(eventApplicationId: Float!, status: String!): Event!
  setNotificationAsRead(id: Float!): Notification!
  updateAccount(input: UpdateAccountInput!): Account!
  updateGroup(id: Int!, input: CreateOrUpdateGroupInput!): Group!
}

type Notification {
  account: Account!
  accountId: Int!
  createdAt: DateTime!
  id: Int!
  message: String!
  read: Boolean!
  title: String!
  updatedAt: DateTime!
}

type Preference {
  application: EventApplication
  applicationId: Int
  comment: String!
  createdAt: DateTime!
  dislikes: String!
  eventApplication: EventApplication!
  id: Int!
  likes: String!
  priceRange: PriceRange!
  updatedAt: DateTime!
}

enum PriceRange {
  MIN_0_MAX_10
  MIN_10_MAX_20
  MIN_20_MAX_30
  NO_MATTER
}

type Query {
  chat(id: Float!): [Chat!]!
  chatMembers(chatId: Float!): [ChatMember!]!
  currentSession: AccountSession!
  debug: JSON!
  echo(text: String!): String!
  event(id: Int!): Event!
  eventApplicationPair(id: Int!): EventApplicationPair!
  eventApplicationPairs(eventId: Float!): [EventApplicationPair!]!
  events(groupId: Int!): [Event!]!
  generateTelegramBotLink: String!
  generateUrlGoogle(state: String): String!
  getGroupByEventId(eventId: Int!): Group!
  group(id: Int!): Group!
  groupInvite(groupId: Float!): [GroupInvite!]!
  groupMember(groupId: Float!): [GroupMember!]!
  isGroupNameAvailable(name: String!): Boolean!
  messages(chatId: Float!): [Message!]!
  notification(id: Float!): Notification!
  notifications(limit: Float!, offset: Float!): [Notification!]!
  privateGroups(limit: Int!, offset: Int!): [Group!]!
  publicGroups(limit: Int!, offset: Int!): [Group!]!
  testTranslation(username: String!): String!
  whoami: Account!
}

input UpdateAccountInput {
  username: String!
}